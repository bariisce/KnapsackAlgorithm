package knapsackOdev2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws FileNotFoundException{
		
		Knapsack ks = new Knapsack();
		
		File file = new File("ks_19_0.txt");
		Scanner scan = new Scanner(file);
		
		int W = scan.nextInt();
		int n = scan.nextInt();
		
		int[] nesneAgirligi = new int[n];
		int[] degerler = new int[n];
		
		for(int i=0;i<n;i++) {
			degerler[i] = scan.nextInt();
			nesneAgirligi[i] = scan.nextInt();
		}
		scan.close();
		
		System.out.println("En Yüksek Değer: " + ks.knapsack(W, nesneAgirligi, degerler, n));
		/* 10000 boyutluk dosya için
		 
		 class Nesne implements Comparable<Nesne> {
    int _agirlik;
    int _deger;
    double birimDeger;

    public Item(int weight, int value) {
        _agirlik = weight;
        _deger = value;
        _birimDeger = (double) value / weight;
    }

    @Override
    public int compareTo(Nesne o) {
        return Double.compare(o.birimDeger, _birimDeger);
    }
}

public class KnapsackGreedyLargeDataset {
    public static void main(String[] args) throws FileNotFoundException{
        List<Nesne> esyalar = new ArrayList<>();
        int capacity = 0;

        BufferedReader br = new BufferedReader(new FileReader("ks_10000_0.txt"));
        String satir = br.readLine();
        String[] degerler = satir.split(" ");

        int n = Integer.parseInt(degerler[1]);
        for (int i = 0; i < n; i++) {
            satir = br.readLine();
            degerler = satir.split(" ");

            int agirlik = Integer.parseInt(degerler[0]);
            int deger = Integer.parseInt(degerler[1]);
            items.add(new Item(agirlik, deger));
          }

          W = Integer.parseInt(degerler[0]);

        Collections.sort(esyalar);
        int enYuksekDeger = knapsack(esyalar, W);
        System.out.println("En Yuksek Deger: " + enYuksekDeger);
    }

    public static int knapsack(List<Nesne> esyalar, int W) {
        int toplamDeger = 0;
        int bosYer = W;

        for (Nesne esya : esyalar) {
            if (esya._agirlik <= bosYer) {
                toplamDeger += esya._deger;
                bosYer -= esya._agirlik;
            } else {
                double fraction = (double) remainingCapacity / item.weight;
                totalValue += fraction * item.value;
                break;
            }
        }

        return totalValue;
    }
}
		 */
		
    }
}
