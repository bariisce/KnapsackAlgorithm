package knapsackOdev2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws FileNotFoundException{
		
		Knapsack ks = new Knapsack();
		
		File file = new File("ks_200_0.txt");
		Scanner scan = new Scanner(file);
		
		int W = scan.nextInt();
		int n = scan.nextInt();
		
		int[] nesneAgirligi = new int[n];
		int[] degerler = new int[n];
		
		for(int i=0;i<n;i++) {
			degerler[i] = scan.nextInt();
			nesneAgirligi[i] = scan.nextInt();
		}
		scan.close();
		
		System.out.println("En Yüksek Değer: " + ks.knapsack(W, nesneAgirligi, degerler, n));
		
    }
}

package knapsackOdev2;

/*
 10000 boyutlu dosya için
 import java.io.BufferedReader;

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Esya implements Comparable<Item> {
    int _agirlik;
    int _deger;
    double _birimDeger;

    public Esya(int agirlik, int deger) {
        _agirlik = agirlik;
        _deger = deger;
        _birimDeger = (double) deger / agirlik;
    }

    @Override
    public int compareTo(Esya e) {
        return Double.compare(e._birimDeger, this.birimDeger);
    }
}

public class Main {
    public static void main(String[] args) {
        List<Esya> esyalar = new ArrayList<>();
        int W = 0;

        BufferedReader br = new BufferedReader(new FileReader("ks_10000_0.txt"));
            String line = br.readLine();
            String[] values = line.split(" ");

            int numItems = Integer.parseInt(values[1]);
            for (int i = 0; i < numItems; i++) {
                line = br.readLine();
                values = line.split(" ");

                int weight = Integer.parseInt(values[0]);
                int value = Integer.parseInt(values[1]);
                items.add(new Item(weight, value));
            }

            W = Integer.parseInt(degerler[0]);

        Collections.sort(items);
        int maxValue = knapsack(esyalar, W);
        System.out.println("En Yüksek Değer: " + enYuksekDeger);
    }

    public static int knapsack(List<Item> items, int capacity) {
        int totalValue = 0;
        int remainingCapacity = capacity;

        for (Item item : items) {
            if (item.weight <= remainingCapacity) {
                totalValue += item.value;
                remainingCapacity -= item.weight;
            } else {
                double fraction = (double) remainingCapacity / item.weight;
                totalValue += fraction * item.value;
                break;
            }
        }

        return totalValue;
    }
}*/
