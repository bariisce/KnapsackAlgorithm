package knapsackOdev2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		
		/*File file = new File("ks_19_0.txt");
		Scanner scan = new Scanner(file);
		
		int W = scan.nextInt();
		int n = scan.nextInt();
		
		int[] nesneAgirligi = new int[n];
		int[] degerler = new int[n];
		
		for(int i=0;i<n;i++) {
			degerler[i] = scan.nextInt();
			nesneAgirligi[i] = scan.nextInt();
		}
		scan.close();
		
		System.out.println("En Yüksek Değer: " + ks.knapsack(W, nesneAgirligi, degerler, n));
		*/
		List<Knapsack> items = new ArrayList<>();
        int capacity = 0;

        try (BufferedReader br = new BufferedReader(new FileReader("ks_10000_0.txt"))) {
            String line;
            int lineCount = 0;

            while ((line = br.readLine()) != null) {
                String[] values = line.split(" ");
                if (lineCount < values.length) {
                    int weight = Integer.parseInt(values[0]);
                    int value = Integer.parseInt(values[1]);
                    items.add(new Knapsack(weight, value));
                } else {
                    capacity = Integer.parseInt(values[0]);
                }
                lineCount++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        int[][] dp = new int[items.size() + 1][capacity + 1];

        for (int i = 1; i <= items.size(); i++) {
            Knapsack item = items.get(i - 1);
            for (int j = 1; j <= capacity; j++) {
                if (item._agirlik <= j) {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - item._agirlik] + item._deger);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        int maxValue = dp[items.size()][capacity];
        System.out.println("Maximum value: " + maxValue);
    }
	}
}
